# WHILE looks strikingly similar to IF, but the only reason it doesn't loop and run forever is because RETURN escapes all loops.
# Nesting WHILE loops like this also normally causes the O-time to increase exponentially, but due to RETURN syntax, it has similar processing to the previous (IF_Version).

#def segmenting_via_while(a ,b ,c) :
#  while a == 1 :
#    while b == 1 :
#      while c == 1 : return (7)
#      return (6)
#    while c == 1 : return (5)
#    return (1)
#  while b == 1 :
#    while c == 1 : return (4)
#    return (2)
#  while c == 1 : return (3)
#  return (0)

#print(segmenting_via_while(1 ,0 ,1))

dictionary_of_tuples = {"tuple8": (1, 1, 1), "tuple7": (1, 1, 0), "tuple6": (1, 0, 1), "tuple5": (1, 0, 0),
                        "tuple4": (0, 1, 1), "tuple3": (0, 1, 0), "tuple2": (0, 0, 1), "tuple1": (0, 0, 0)}

def segmenting_via_while (tuple) :
  while tuple[0] == 1 :
    while tuple[1] == 1 :
      while tuple[2] == 1 : return (7)
      return (6)
    while tuple[2] == 1 : return (5)
    return (1)
  while tuple[1] == 1 :
    while tuple[2] == 1 : return (4)
    return (2)
  while tuple[2] == 1 : return (3)
  return (0)

#print(segmenting_via_while(dictionary_of_tuples['tuple8']))
for keys,values in dictionary_of_tuples.items():
  print(keys+" :",values,":",segmenting_via_while(values))
