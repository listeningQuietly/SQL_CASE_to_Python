# Like WHILE, nesting FOR loops normally causes the O-time to increase by magnitudes, but due to RETURN syntax, it has similar processing to that of the IF_Version.
# All three read very clean to the human eye.

#def segmenting_via_for (a ,b ,c) :
#  for x in range (a ,0 ,-1) :
#    for x in range (b ,0 ,-1) :
#      for x in range (c ,0 ,-1) : return (7)
#      return (6)
#    for x in range (c ,0 ,-1) : return (5)
#    return (1)
#  for x in range (b ,0 ,-1) :
#    for x in range (c ,0 ,-1) : return (4)
#    return (2)
#  for x in range (c ,0 ,-1) : return (3)
#  return (0)

#print(segmenting_via_for(1 ,0 ,1))

dictionary_of_tuples = {"tuple1": (0,0,0), "tuple2": (0,0,1), "tuple3": (0,1,0), "tuple4": (0,1,1), "tuple5": (1,0,0), "tuple6": (1,0,1), "tuple7": (1,1,0), "tuple8": (1,1,1)}

def segmenting_via_for (tuple) :
  for keys in range (tuple[0] ,0 ,-1) :
    for keys in range (tuple[1] ,0 ,-1) :
      for keys in range (tuple[2] ,0 ,-1) : return (7)
      return (6)
    for keys in range (tuple[2] ,0 ,-1) : return (5)
    return (1)
  for keys in range (tuple[1] ,0 ,-1) :
    for keys in range (tuple[2] ,0 ,-1) : return (4)
    return (2)
  for keys in range (tuple[2] ,0 ,-1) : return (3)
  return (0)

#print(segmenting_via_for(dictionary_of_tuples['tuple8']))
for keys in dictionary_of_tuples:
  print(keys + ":", dictionary_of_tuples[keys],segmenting_via_for(dictionary_of_tuples[keys]))
